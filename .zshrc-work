#!/bin/zsh
#########################################################
# ASSIA
export MAVEN_OPTS="-Xms1024m -Xmx4096m -XX:PermSize=1024m"
export JIRA_URL='https://assia-inc.atlassian.net'

export JAVA_HOME="/usr/java/jdk1.8.0_201/jre/"
export PATH=$JAVA_HOME:$PATH
export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib:$LD_LIBRARY_PATH
export SQLPATH=$HOME/.local/share/sqlcl/
export PYTHONPATH='/home/pganuza/Repositorios/ASSIA/utils'

# Corporate mounts
alias mount-home="sudo mount.cifs -o user=pganuza,domain=ASSIA-INC,uid=1000,gid=1000,vers=1.0 //rc-netapp02a.assia-inc.com/home/pganuza /mnt/assianet-home"
alias mount-corp="sudo mount.cifs -o user=pganuza,domain=ASSIA-INC,uid=1000,gid=1000,vers=1.0 //rc-netapp02a.assia-inc.com/corp /mnt/assianet-corp"
alias mount-onedrive='rclone mount $(basename $(pwd)): onedrive'

# Backup important work info into external HDD
alias backup-pganuza-e7470="rsync -avh --delete-after ~/.* ~/Plantillas ~/Software ~/Trabajo ~/Workspace/system-level_test_plan ~/Workspace/drafts  /run/media/pganuza/pganuza-backups/"

# Alias for very frequent SSH connections
alias se='sshrc user@$CUSTOMER_ENV.assia-inc.com'

#########################################################
# CVS configuration
export CVSROOT=:ext:pganuza@rc-cvs-01.assia-inc.com:/cvs
alias cvs-update='cvs update -PAd'
alias cvs-discard_changes='cvs-update -C'
alias cvs-checkout='cvs co -r HEAD'

alias rsync-lexus='rsync -rvzh $CUSTOMER_DIR_CVS lexus:$CUSTOMER_DIR_CVS --exclude "*/target/"'

#########################################################
# CURRENTLY WORKING
# Add some useful paths to the hotlist for n-cd
znt_cd_hotlist=( "${znt_cd_hotlist[@]}" '=====================================pganuza-e7470rc====' )
znt_cd_hotlist=( "${znt_cd_hotlist[@]}" '~/Documents/KnowHow/wiki/'
                                        '~/Documents/QA/'
                                        '~/Repositorios/bookmarks/' )

customer_info_file="$HOME/Documents/Releases/customers-info.csv"
populate_customer_variables() {
	export CUSTOMER=$1
	export CUSTOMER_NAME="$(grep $CUSTOMER $customer_info_file | cut -d';' -f'2')"
	export CUSTOMER_ENV="$(grep $CUSTOMER $customer_info_file | cut -d';' -f'3')"
	export CUSTOMER_DB="$(grep $CUSTOMER $customer_info_file | cut -d';' -f'4')"
	export CUSTOMER_VER="$(grep $CUSTOMER $customer_info_file | cut -d';' -f'5')"
	export DBF='plain'
	export CUSTOMER_DIR="$HOME/Documents/Releases/$CUSTOMER/$CUSTOMER_VER"
	export CUSTOMER_DIR_CVS="$HOME/Repositorios/bookmarks/releases/$CUSTOMER/"

	znt_cd_hotlist=( "${znt_cd_hotlist[@]}" '------------------------------------=currently working=-' )
	znt_cd_hotlist=( "${znt_cd_hotlist[@]}" "$CUSTOMER_DIR_CVS" "$CUSTOMER_DIR" )
}
populate_customer_variables demo-c
alias cdc='cd $CUSTOMER_DIR'


#########################################################
# UTILS
# Just throw a fast query 
alias query='sqlturbo.py -u $CUSTOMER_DB -f $DBF'

# Send a request to DcPc
dcpc_request() {
	if [[ $# < 1 ]]; then
		>&2 echo "Usage: dcpc_request 'REQUEST,IN,LINE'|req.dat (env.addr.es)"
	elif [[ -a ${1} ]]; then
		scp $1 ${2:-$CUSTOMER_ENV}:install/dcpc/data/input/
	else
		tmp_file='/tmp/dcpc_req.dat'
		echo "$1" > $tmp_file
		scp $tmp_file ${2:-$CUSTOMER_ENV}:install/dcpc/data/input/
	fi
}

# Translate to Jira and copy to clipboard a comment written in Markdown
cp_jira_comment(){
	cat **/README.md | md2jira.sh | xclip
}
alias cpjc='cp_jira_comment'

# Get version installed on a customer's support environment
get_customer_versions(){
	ssh $1 'ls -d install/*-*' | sed 's/install\///'
}
compdef get_customer_versions=ssh

# Download SQL files from a release
wget_sqls() {
	# http://rc-build-01.assia-inc.com/releases/DEMO/DELIVERED/5.5.3/sql/
	customer_clean=$(echo $CUSTOMER | cut -d'-' -f1 | tr '[:lower:]' '[:upper:]') # the cut is needed for demo-X _customers_
	url_delivered="http://rc-build-01.assia-inc.com/releases/$customer_clean/DELIVERED/$CUSTOMER_VER/sql"
	url_delivered_not="http://rc-build-01.assia-inc.com/releases/$customer_clean/TO_BE_DELIVERED/$CUSTOMER_VER/sql"
	wget -r -np -l1 -A ".sql" --no-directories $url_delivered
	wget -r -np -l1 -A ".sql" --no-directories $url_delivered_not
}

# Connect to a database
function dbconn() {
	if [ $# -ne 0 ]; then
		sqlcl $1/assia@db-ref.assia-inc.com:1521:dslo2 @$2
	else
		echo "Connecting to $CUSTOMER_DB..."
		sqlcl $CUSTOMER_DB/assia@db-ref.assia-inc.com:1521:dslo2
	fi
}

#########################################################
## TASK MANAGEMENT
#
task_start_specifics(){
	ji.py query --issue $TASK --fields 'summary' > .title
	ji.py query --issue $TASK --fields 'description' > .description

	# About where to check it
	echo -e "To be verified in:" >> README.md
	ji.py query --issue $TASK --fields 'fixVersions' | grep -oE "name='[^']+'" | cut -d= -f2 | sed -E 's/^/- [pending] /' >> README.md 
	# The line below would strip the quotes, but it messes VIMs syntax highlighting in this file
	# ji.py query --issue DSLE-22740 --fields 'fixVersions' | grep -oE "name='[^']+'" | cut -d= -f2 | sed 's/^/- [<++>] /' |sed "s/'//g" > README.md

	echo -e "\n------------------------------------" >> README.md
	echo -e "\nVerified in **$CUSTOMER_ENV $CUSTOMER_VER**." >> README.md

	# Rutinary checks
	echo -e '\n##### Modules versions' >> README.md
	## Get every module with its version in one line
	module_fix_for_version=$(ji.py query --issue $TASK --fields 'module_fix_for_version' | grep -oE "[^ ]+[ |-][0-9|.]+")
	echo $module_fix_for_version | sed -E 's/([^ ]+)[ |-]([0-9|.]+)/- [<++>] \1 \2/' >> README.md

	modules_check=$( echo $module_fix_for_version | sed -E 's/([^ ]+)[ |-]([0-9|.]+)/find install\/ *simulator*\/ -name "*\1*" ; /' | tr -d \\n)
	#modules_check=$( echo $module_fix_for_version | sed -E 's/([^ ]+) ([0-9|.]+)/find install\/ -name "*\1*" ; /' )
	echo -e '\n```sh' >> README.md
	echo -e "\n$modules_check" >> README.md
	#ssh $CUSTOMER_ENV "'$(echo $modules_check | tr -d \\n)'" >> README.md
	echo -e "\n\n\`\`\`\n" >> README.md

	# Typical layout
	echo -e '### Test' >> README.md
	ji.py query --issue $TASK --fields 'unit_test' >> README.md

	ji.py assign --issue $TASK --value '5bd7a4938995b717bb1b86dd'
}

task_resume_specifics(){
	#jira_ticket $TASK
}

jira_ticket(){
	xdg-open "https://assia-inc.atlassian.net/browse/$1"
}

task_download_data() {
	rsync -rvzh ${1:-$CUSTOMER_ENV}:pganuza/${$(pwd)#/home/pganuza/Documents/}/ .
}

task_upload_data() {
	rsync -rvzh ./ ${1:-$CUSTOMER_ENV}:pganuza/${$(pwd)#/home/pganuza/Documents/}/
}

# Make backup of file
cpp() {
	cp -r --parent "$1" "${2:-.}"
}

template_test() {
	template="$1"
	tname="$2"

	take $tname
	cp ../$template/setup.sh .
	cp -r ../$template/config .
}

template_setup() {
	echo -e "#!/bin/bash\nsource /tmp/.pganuza.sshrc.*/sshrc.bashrc\npush_config config/" > setup.sh
	chmod +x setup.sh
}


#########################################################
## TASK MANAGEMENT
#
echo '#########################################################'
echo '# TODO priorities'
t
echo -e '\n#########################################################'
echo      "# TODO for $CUSTOMER"
t ls +$CUSTOMER

################################################
# SOURCES
# [1] https://superuser.com/questions/271986/execute-a-command-from-another-directory-in-bash#271992
